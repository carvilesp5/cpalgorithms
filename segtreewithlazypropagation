#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1e5 + 5;

int properties, queries, prices[MAXN], seg[MAXN << 2], lazy[MAXN << 2];

void build(int node, int l, int r)
{
    if(l == r)
        seg[node] = prices[l];
    else
    {
        int mid = (l + r) / 2;
        build(2 * node, l, mid);
        build(2 * node + 1, mid + 1, r);
        seg[node] = min(seg[2 * node], seg[2 * node + 1]);
    }
}

void push(int node)
{
    seg[2 * node] = seg[2 * node + 1] = lazy[node];
    lazy[2 * node] = lazy[2 * node + 1] = lazy[node];
    lazy[node] = 0;
}

void update(int node, int l, int r, int l1, int r1, int val)
{
    if(lazy[node])
        push(node);
    if(l1 > r1)
        return;
    if(l1 == l && r1 == r)
    {
        seg[node] = val;
        lazy[node] = val;
    }
    else
    {
        int mid = (l + r) / 2;
        update(2 * node, l, mid, l1, min(r1, mid), val);
        update(2 * node + 1, mid + 1, r, max(l1, mid + 1), r1, val);
        seg[node] = min(seg[2 * node], seg[2 * node + 1]);
    }
}

int query(int node, int l, int r, int l1, int r1)
{
    if(lazy[node])
        push(node);
    if(l1 > r1)
        return INT_MAX;
    if(l1 <= l && r <= r1)
        return seg[node];
    int mid = (l + r) / 2;
    return min(query(2 * node, l, mid, l1, min(r1, mid)), query(2 * node + 1, mid + 1, r, max(l1, mid + 1), r1));
}

int main()
{
    cin >> properties;
    for(int i = 0; i < properties; ++i)
        cin >> prices[i];
    build(1, 0, properties - 1);
    cin >> queries;
    for (int i = 0; i < queries; ++i)
    {
        int type;
        cin >> type;
        if(type == 1)
        {
            int l, r, val;
            cin >> l >> r >> val;
            update(1, 0, properties - 1, l, r, val);
        }
        else
        {
            int l, r;
            cin >> l >> r;
            cout << query(1, 0, properties - 1, l, r) << "\n";
        }
    }
    return 0;
}
